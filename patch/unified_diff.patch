--- /usr/lib/qt5/qml/Sailfish/Lipstick/NotificationBaseItem.qml
+++ /usr/lib/qt5/qml/Sailfish/Lipstick/NotificationBaseItem.qml
@@ -17,6 +17,7 @@ Private.SwipeItem {
     property alias roundedCorners: background.roundedCorners
     property bool userRemovable: true
     property bool groupHighlighted
+    property bool showHousekeepingBackground: true
 
     signal removeRequested
     signal triggered
@@ -85,12 +86,12 @@ Private.SwipeItem {
 
         z: -1
         parent: root.contentItem
-        highlighted: root.draggable && root.highlighted
+        highlighted: root.showHousekeepingBackground && root.draggable && root.highlighted
         height: parent.height - (extraBackgroundPadding ? 0 : 2*y)
         x: Theme.paddingMedium
         y: Math.round(Theme.paddingSmall/2)
         width: parent.width - 2*x
-        enabled: root.draggable
+        enabled: root.showHousekeepingBackground && root.draggable
 
         color:  Theme.highlightBackgroundColor
         opacity: enabled ? Theme.highlightBackgroundOpacity : 0.0
--- /usr/share/lipstick-jolla-home-qt5/layers/HomeLayer.qml
+++ /usr/share/lipstick-jolla-home-qt5/layers/HomeLayer.qml
@@ -120,7 +120,7 @@ Pannable {
     }
 
     dragArea {
-        enabled: !currentItem.maximized && Lipstick.compositor.systemInitComplete
+        enabled: false
         opacity: Math.min(1.0, Theme.opacityLow + (1.0 - Theme.opacityLow)*Math.pow((1.0 - Math.min(homescreen.overshoot, Theme.itemSizeExtraLarge*2)/(Theme.itemSizeExtraLarge*2)), 1.5))
     }
 
--- /usr/share/lipstick-jolla-home-qt5/notifications/NotificationStandardGroupItem.qml
+++ /usr/share/lipstick-jolla-home-qt5/notifications/NotificationStandardGroupItem.qml
@@ -46,6 +46,7 @@ NotificationGroupItem {
 
     implicitHeight: column.height
     draggable: groupHeader.draggable
+    _showPress: pressed && !housekeeping
 
     Column {
         id: column
@@ -61,6 +62,8 @@ NotificationGroupItem {
             extraBackgroundPadding: group.hasOnlyOneItem
             groupHighlighted: root.highlighted
             enabled: false
+            draggable: userRemovable
+            showHousekeepingBackground: housekeeping
         }
 
         Item {
--- /usr/share/lipstick-jolla-home-qt5/notifications/NotificationStandardGroupMember.qml
+++ /usr/share/lipstick-jolla-home-qt5/notifications/NotificationStandardGroupMember.qml
@@ -56,12 +56,15 @@ NotificationGroupMember {
     }
 
     contentHeight: Math.max(2 * contentColumn.y + contentColumn.height, _iconBottom)
-    draggable: housekeeping && userRemovable
+    draggable: userRemovable
+    showHousekeepingBackground: housekeeping
 
     VerticalAutoScroll.keepVisible: expanded && (actionRow.animating || bodyHeightAnimation.running)
     VerticalAutoScroll.topMargin: Theme.paddingLarge
     VerticalAutoScroll.bottomMargin: Theme.paddingLarge
 
+    _showPress: pressed && !housekeeping
+
     Column {
         id: contentColumn
 
--- /usr/share/lipstick-jolla-home-qt5/switcher/SwitcherItem.qml
+++ /usr/share/lipstick-jolla-home-qt5/switcher/SwitcherItem.qml
@@ -193,6 +193,12 @@ EditableGridDelegate {
         }
     }
 
+    SwitcherSwipeItem {
+        id: switcherSwipeItem
+        targetItem: windowPixmap
+        wrapper: wrapper
+    }
+
     LauncherIcon {
         size: Theme.iconSizeMedium
         anchors.centerIn: parent
@@ -211,7 +217,7 @@ EditableGridDelegate {
         anchors.bottom: parent.bottom
         opacity: windowPixmap.opacity
 
-        sourceComponent: coverActionModel.count > 0 ? coverActionIndicators : undefined
+        sourceComponent: (coverActionModel.count > 0 && !switcherSwipeItem.closeMode) ? coverActionIndicators : undefined
     }
 
     Timer {
--- /usr/share/lipstick-jolla-home-qt5/switcher/Switcher.qml
+++ /usr/share/lipstick-jolla-home-qt5/switcher/Switcher.qml
@@ -18,6 +18,11 @@ import "../main"
 SilicaFlickable {
     id: switcherRoot
 
+    property bool swipeCloseMode: false
+    onSwipeCloseModeChanged: {
+        Lipstick.compositor.wallpaper.dimmer.dimmed = swipeCloseMode
+    }
+
     readonly property int showingWid: Lipstick.compositor.appLayer.pendingWindowId
     property Item launchingItem
     property bool skipOnReleased: false
@@ -52,6 +57,7 @@ SilicaFlickable {
 
     contentHeight: Math.ceil(switcherWrapper.y + switcherWrapper.height)
 
+    pressDelay: 0 // somehow prevents random swipe stealing when interactive is enabled
     interactive: contentHeight > height || housekeeping
 
     onHousekeepingChanged: {
--- /dev/null
+++ /usr/share/lipstick-jolla-home-qt5/switcher/SwitcherSwipeItem.qml
@@ -0,0 +1,292 @@
+import QtQuick 2.0
+import Sailfish.Silica 1.0
+import Nemo.Ngf 1.0
+
+Item {
+    id: switcherSwipeItem
+    width: parent.width
+    height: parent.height
+    clip: true
+    enabled: !wrapper.hideCover && !wrapper.editMode
+
+    property Item targetItem // dragged pixmap
+    property Item wrapper
+    property bool closeMode: false
+
+    onCloseModeChanged: {
+        if (closeMode) {
+            switcherRoot.swipeCloseMode = true
+        } else {
+            switcherRoot.swipeCloseMode = false
+        }
+    }
+
+    NonGraphicalFeedback {
+        id: ngfPullEvent
+        event: "pulldown_highlight"
+    }
+
+    Component.onCompleted: {
+        //For trivial upgrades
+        targetItem.parent = dragItem
+        targetItem.opacity = Qt.binding( function() {
+            return dragArea.coverOpacity
+        })
+        coverOpacityAnimation.duration = 0 // FIXME
+
+    }
+
+    Connections {
+        target: wrapper
+        onEditModeChanged: {
+            closeMode = false
+        }
+    }
+
+    Item {
+        id: dragItem
+        width: parent.width
+        height: parent.height
+
+        Behavior on x {
+            id: dragItemXBehavior
+            enabled: false
+            NumberAnimation {
+                to: 0
+                duration: 150
+            }
+        }
+
+        MouseArea {
+            id: dragArea
+            anchors.fill: parent
+            propagateComposedEvents: true
+
+            property double dragXFactor: dragItem.x == 0 ? 0 : Math.abs(dragItem.x) / drag.maximumX
+            property bool dragXAtMaximum: (drag.maximumX == 0) ? false : (dragItem.x >= (drag.maximumX - 1) || dragItem.x <= (drag.minimumX + 1))
+            property bool dragXItemMoving: dragItem.x > 0 || dragItem.x < 0
+            property real coverOpacity: {
+                if (switcherRoot.swipeCloseMode && !closeMode) { // dim other covers in closeMode
+                    return 0.3
+                } else {
+                    return 1.0 - (closeMode ? dragYFactor * 2 : dragXFactor * 2)
+                }
+            }
+            property bool dragRight: dragItem.x > 0
+
+            property bool dragYAtMaximum: dragItem.y >= (drag.maximumY - 1) || dragItem.y <= (drag.minimumY + 1)
+            property double dragYFactor: dragItem.y == 0 ? 0 : Math.abs(dragItem.y) / drag.maximumY
+            property bool dragYItemMoving: dragItem.y > 0 || dragItem.y < 0
+
+            property int initX: 0
+            property int initY: 0
+            property bool pendingEditMode: false
+
+            signal triggerAction(int i)
+
+            onDragXAtMaximumChanged: {
+                if (dragXAtMaximum && drag.active)
+                    ngfPullEvent.play()
+            }
+
+            onDragYAtMaximumChanged: {
+                if (dragYAtMaximum && drag.active)
+                    ngfPullEvent.play()
+            }
+
+            onClicked: {
+                mouse.accepted = false
+                closeMode = false
+            }
+
+            onPressed: {
+                holdTimer.start()
+                closeMode = false
+                initX = mouse.x
+                initY = mouse.y
+            }
+
+             onCanceled: {
+                 holdTimer.stop()
+                 closeMode = false
+                 pendingEditMode = false
+             }
+
+            onReleased:{
+                holdTimer.stop()
+                if (pendingEditMode) {
+                    pendingEditMode = false
+                    wrapper.pressAndHold()
+                }
+            }
+
+            onPressAndHold: {
+                mouse.accepted = true
+            }
+
+            Timer {
+                id: holdTimer
+                interval: 500
+                onTriggered: {
+                    if ((Math.abs(dragArea.mouseX - dragArea.initX) < Theme.startDragDistance) &&
+                        (Math.abs(dragArea.mouseY - dragArea.initY) < Theme.startDragDistance)) {
+                        closeMode = true
+                        dragArea.pendingEditMode = true
+                        ngfPullEvent.play()
+                    }
+                }
+            }
+
+            SequentialAnimation {
+                id: dragYAnim
+                PropertyAnimation {
+                    target: dragItem
+                    property: "y"
+                    to: 0
+                    duration: 100
+                }
+                ScriptAction {
+                    script: {
+                        closeMode = false
+                    }
+                }
+            }
+
+            drag {
+                axis: closeMode ? Drag.YAxis : Drag.XAxis
+                target: dragItem
+                maximumX: coverActionModel.count ? (width * 0.4) : 0
+                minimumX: -drag.maximumX
+                maximumY: height * 0.4
+                minimumY: -drag.maximumY
+
+                onActiveChanged: {
+                    holdTimer.stop()
+                    dragItemXBehavior.enabled = !drag.active && (drag.axis == Drag.XAxis)
+                    dragArea.pendingEditMode = false
+
+                    if (!drag.active) {
+                        if (dragXAtMaximum) {
+                            if (dragArea.dragRight) {
+                                //console.log("trigger action left")
+                                dragArea.triggerAction(0)
+                            } else {
+                                //console.log("trigger action right")
+                                dragArea.triggerAction(1)
+                            }
+                        } else if (dragYAtMaximum) {
+                            dragYAnim.start()
+                            wrapper.close()
+                            return
+                        }
+                        dragItem.x = 0
+                        dragYAnim.start()
+                    }
+                }
+            }
+        }
+    }
+
+    Rectangle { // background that is shown when the cover is dragged
+        radius: Theme.paddingMedium
+        opacity: {
+           if (dragArea.dragXAtMaximum || dragArea.dragYAtMaximum) {
+               return 0.7
+           } else {
+               if ((Math.abs(dragItem.x) < Theme.paddingSmall) &&
+                   (Math.abs(dragItem.y) < Theme.paddingSmall)) {
+                   return Theme.highlightBackgroundOpacity
+               } else {
+                   return 0.2 * (closeMode ? dragArea.dragYFactor : dragArea.dragXFactor) + Theme.highlightBackgroundOpacity
+               }
+           }
+        }
+        color: (dragArea.pressed) ?
+                Theme.highlightBackgroundColor : "transparent"
+        anchors.fill: parent
+    }
+
+    Image { // Close draggable action icon
+        id: closingGraphic
+        visible: dragArea.dragYItemMoving
+        source: "image://theme/graphic-close-app"
+        scale: wrapper.width / Theme.coverSizeLarge.width
+        asynchronous: true
+        x: dragArea.width / 2 - width / 2
+        y: (dragItem.y > 0) ? dragItem.y * yFactor - height : dragArea.height + dragItem.y * yFactor
+        opacity: dragArea.dragYAtMaximum ? 1.0 : 0.5 * dragArea.dragYFactor
+        property double yFactor: (dragArea.height / 2 + height / 2) / dragArea.drag.maximumY
+    }
+
+    Repeater {
+        model: coverActionModel
+
+        delegate: Image { // Icon representing the action that becomes visible when cover is dragged
+
+            property double xFactor: (dragArea.width / 2 + width / 2) / dragArea.drag.maximumX
+            property string iconsDir: "z2.0"
+            property string icon: {
+                var name = model.iconSource.toString()
+                if (name === "")
+                    return ""
+
+                if (name.indexOf("file:///") === 0)
+                    return name
+                else
+                    return "/usr/share/themes/sailfish-default/meegotouch/" + iconsDir + "/icons/" + name.split("/").pop() + ".png"
+            }
+            //zypper in sailfish-content-graphics-default-z2.0
+
+            x: {
+                if (coverActionModel.count === 2) {
+                    if (index === 0) {
+                        return dragItem.x * xFactor - width
+                    } else {
+                        return dragArea.width + dragItem.x * xFactor
+                    }
+                } else if (coverActionModel.count === 1) {
+                    if (dragItem.x > 0) {
+                        return dragItem.x * xFactor - width
+                    } else {
+                        return dragArea.width + dragItem.x * xFactor
+                    }
+                } else if (coverActionModel.count > 2)  { // count = 3, use 1 and 2 delegates
+                    if (index === 1) {
+                        return dragItem.x * xFactor - width
+                    } else if (index === 2){
+                        return dragArea.width + dragItem.x * xFactor
+                    }
+                }
+                return 0
+            }
+            y: dragArea.height / 3 - height / 2
+            visible: dragArea.dragXItemMoving && !(coverActionModel.count === 3 && index == 0)
+            source: icon
+            opacity: dragArea.dragXAtMaximum ? 1.0 : 0.5 * dragArea.dragXFactor
+            smooth: true
+            asynchronous: true
+            onStatusChanged: {
+                if (status == Image.Error) {
+                    iconsDir = "z1.0"
+                }
+            }
+
+            Connections {
+                target: dragArea
+                onTriggerAction: {
+                    if (coverActionModel.count === 1) {
+                        coverActionModel.trigger(model.id)
+                    } else if (coverActionModel.count === 2){
+                        if (index == i)
+                            coverActionModel.trigger(model.id)
+                    } else if (coverActionModel.count === 3){
+                        if (index == ++i) {
+                            coverActionModel.trigger(model.id)
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
